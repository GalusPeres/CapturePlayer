import React, { useState, useEffect, useMemo, useRef, KeyboardEvent } from 'react';
import { useSettings } from '../context/SettingsContext';
import { SimpleSelectOption, SimpleSelect } from './SimpleSelect';

type SignalInfo = { w: number, h: number, fps?: number } | null;

type Props = {
  visible: boolean;
  onClose(): void;
  running: boolean;
  onToggle(): void;
  onApplyDevices(videoDev: string, audioDev: string): void;
  signalInfo?: SignalInfo;
};

const aspectModes = [
  { value: 'auto', label: 'Auto' },
  { value: '16:9', label: '16:9' },
  { value: '4:3',  label: '4:3' },
  { value: 'free', label: 'Free' },
];

function cleanLabel(label: string): string {
  return label.replace(/\s*\([0-9a-f]{4}:[0-9a-f]{4}\)\s*$/i, '').trim();
}

export default function SettingsModal({
  visible,
  onClose,
  running,
  onToggle,
  onApplyDevices,
  signalInfo,
}: Props) {
  const settings = useSettings();

  // Tabs: Basic / Advanced
  const [tab, setTab] = useState<'basic' | 'advanced'>('basic');
  const [localVideo, setLocalVideo] = useState(settings.videoDevice);
  const [localAudio, setLocalAudio] = useState(settings.audioDevice);
  const [videoDevices, setVideoDevices] = useState<MediaDeviceInfo[]>([]);
  const [audioDevices, setAudioDevices] = useState<MediaDeviceInfo[]>([]);

  const basicRef = useRef<HTMLButtonElement>(null);
  const advRef = useRef<HTMLButtonElement>(null);

  useEffect(() => {
    navigator.mediaDevices
      .getUserMedia({ video: true, audio: true })
      .then((s) => {
        s.getTracks().forEach((t) => t.stop());
        return navigator.mediaDevices.enumerateDevices();
      })
      .then((devs) => {
        setVideoDevices(devs.filter((d) => d.kind === 'videoinput'));
        setAudioDevices(devs.filter((d) => d.kind === 'audioinput'));
      })
      .catch(console.error);
  }, []);

  const filteredVideo = useMemo<SimpleSelectOption[]>(
    () =>
      videoDevices
        .filter((d) => !/^Default\b/i.test(d.label || ''))
        .map((d, i) => ({
          value: d.deviceId,
          label: cleanLabel(d.label || `Camera ${i + 1}`),
        })),
    [videoDevices]
  );
  const filteredAudio = useMemo<SimpleSelectOption[]>(
    () =>
      audioDevices
        .filter((d) => !/^Default\b/i.test(d.label || ''))
        .map((d, i) => ({
          value: d.deviceId,
          label: cleanLabel(d.label || `Microphone ${i + 1}`),
        })),
    [audioDevices]
  );

  const applyDevices = () => onApplyDevices(localVideo, localAudio);
  const resetColors = () => {
    settings.setBrightness(100);
    settings.setContrast(100);
    settings.setSaturation(100);
    settings.setHue(0);
  };

  const onTabKeyDown = (e: KeyboardEvent) => {
    if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
      e.preventDefault();
      const next = tab === 'basic' ? 'advanced' : 'basic';
      setTab(next);
      setTimeout(() => {
        if (next === 'basic') basicRef.current?.focus();
        else advRef.current?.focus();
      }, 0);
    }
  };



  // Aspect ratio logic
  let aspectMode: string = settings.autoAspectRatio ? 'auto' : settings.manualAspectRatio;
  if (!['auto', '16:9', '4:3', 'free'].includes(aspectMode)) aspectMode = 'auto';

  // Signal info text (resolution and fps)
  let signalTxt = signalInfo?.w && signalInfo?.h ? `Source: ${signalInfo.w}×${signalInfo.h}` : '';
  if (signalInfo?.fps) signalTxt += `@${signalInfo.fps}FPS`;

  if (!visible) return null;

  return (
    <div className={`fixed inset-0 flex items-center justify-center z-50`} onClick={onClose} style={{ pointerEvents: 'auto' }}>
      <div
        className={`
          bg-zinc-900/80
          backdrop-blur-xl
          rounded-2xl
          border border-zinc-700
          shadow-[0_0_70px_rgba(0,0,0,0.8)]
          w-96 max-w-[90vw]
          h-[32rem] max-h-[90vh]
          flex flex-col overflow-hidden
          animate-fade-in
        `}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex justify-between items-center px-6 py-4 border-b border-zinc-700 no-drag relative">
          <h3 className="text-white text-lg">Settings</h3>
          <button
            onClick={onClose}
            className="p-1 no-drag text-white/80 hover:text-white focus:outline-none"
          >
            ✕
          </button>
        </div>

        {/* Tabs */}
        <div className="flex border-b border-zinc-700 no-drag" role="tablist" onKeyDown={onTabKeyDown}>
          <button
            ref={basicRef}
            role="tab"
            aria-selected={tab === 'basic'}
            onClick={() => setTab('basic')}
            className={`flex-1 py-2 text-center ${
              tab === 'basic'
                ? 'text-white border-b-2 border-blue-500'
                : 'text-white/60 hover:text-white'
            } focus:outline-none`}
          >
            Basic
          </button>
          <button
            ref={advRef}
            role="tab"
            aria-selected={tab === 'advanced'}
            onClick={() => setTab('advanced')}
            className={`flex-1 py-2 text-center ${
              tab === 'advanced'
                ? 'text-white border-b-2 border-blue-500'
                : 'text-white/60 hover:text-white'
            } focus:outline-none`}
          >
            Advanced
          </button>
        </div>

        {/* Body */}
        <div className="p-6 flex-1 overflow-auto text-white space-y-6 scrollbar-thin">
          {tab === 'basic' ? (
            <>
              <div>
                <div className="flex items-center justify-between mb-1">
                  <label>Video Device:</label>
                  {signalTxt && (
                    <span className="
                      inline-block px-1.5 py-0.5
                      border border-white/20
                      rounded-md text-xs text-white/70
                      font-mono tracking-wide
                      ml-2
                    ">
                      {signalTxt}
                    </span>
                  )}
                </div>
                <SimpleSelect
                  options={filteredVideo}
                  value={localVideo}
                  onChange={setLocalVideo}
                />
              </div>
              <div>
                <label className="block mb-1">Audio Device:</label>
                <SimpleSelect
                  options={filteredAudio}
                  value={localAudio}
                  onChange={setLocalAudio}
                />
              </div>
              <div>
                <label className="block mb-1">Volume: {settings.volume}</label>
                <input
                  type="range"
                  min={0}
                  max={100}
                  value={settings.volume}
                  onChange={(e) => settings.setVolume(Number(e.target.value))}
                  className="w-full focus:outline-none"
                />
              </div>
            </>
          ) : (
            <>
              {/* Aspect Ratio Options */}
              <div>
                <div className="mb-1 font-medium">Aspect Ratio:</div>
                <div className="flex space-x-2">
                  {aspectModes.map(opt => (
                    <button
                      key={opt.value}
                      className={`px-4 py-1 rounded-full border ${
                        aspectMode === opt.value
                          ? 'bg-blue-600 border-blue-600 text-white'
                          : 'bg-zinc-800 border-zinc-600 text-white/80 hover:text-white'
                      } focus:outline-none transition`}
                      onClick={() => {
                        if (opt.value === 'auto') settings.setAutoAspectRatio(true);
                        else {
                          settings.setAutoAspectRatio(false);
                          settings.setManualAspectRatio(opt.value);
                        }
                      }}
                    >
                      {opt.label}
                    </button>
                  ))}
                </div>
              </div>
              {/* Color Settings */}
              {[
                {
                  id: 'brightness',
                  label: 'Brightness',
                  min: 50,
                  max: 200,
                  value: settings.brightness,
                  setter: settings.setBrightness,
                },
                {
                  id: 'contrast',
                  label: 'Contrast',
                  min: 50,
                  max: 300,
                  value: settings.contrast,
                  setter: settings.setContrast,
                },
                {
                  id: 'saturation',
                  label: 'Saturation',
                  min: 50,
                  max: 400,
                  value: settings.saturation,
                  setter: settings.setSaturation,
                },
                {
                  id: 'hue',
                  label: 'Hue',
                  min: -60,
                  max: 60,
                  value: settings.hue,
                  setter: settings.setHue,
                },
              ].map(({ id, label, min, max, value, setter }) => (
                <div key={id}>
                  <label className="block mb-1">
                    {label}: {value}
                  </label>
                  <input
                    type="range"
                    min={min}
                    max={max}
                    value={value}
                    onChange={(e) => setter(Number(e.target.value))}
                    className="w-full focus:outline-none"
                  />
                </div>
              ))}
            </>
          )}
        </div>

        {/* Footer */}
        <div className="px-6 py-4 border-t border-zinc-700 flex justify-center space-x-4 no-drag">
          {tab === 'basic' ? (
            <>
              {(localVideo !== settings.videoDevice ||
                localAudio !== settings.audioDevice) && (
                <button
                  onClick={applyDevices}
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-full focus:outline-none"
                >
                  Apply Devices
                </button>
              )}
              <button
                onClick={onToggle}
                className={`px-4 py-2 ${
                  running ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'
                } text-white rounded-full focus:outline-none`}
              >
                {running ? 'Stop Stream' : 'Start Stream'}
              </button>
            </>
          ) : (
            <button
              onClick={resetColors}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-full focus:outline-none"
            >
              Reset to Default
            </button>
          )}
        </div>
      </div>
    </div>
  );
}
